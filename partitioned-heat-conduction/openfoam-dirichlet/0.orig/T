FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      T;
}

dimensions      [0 0 0 1 0 0 0];


internalField   uniform 0;

boundaryField
{
    interface
    {
        type            fixedValue;
        value           uniform 2;
    }

    DirichletBoundary
    {
        type            codedFixedValue;
        value           uniform 1;
        name            DirichletBoundary;
        code
        #{
            const       vectorField& Cf = patch().Cf();
            scalarField&    field = *this;
            const scalar t = this->db().time().value();
            forAll(Cf,faceI)
            {
                const scalar x=Cf[faceI][0];
                const scalar y=Cf[faceI][1];
                field[faceI]=1+pow(x,2)+(3*pow(y,2))+1.3*t;
            }
           
        #};

    }

    defaultFaces
    {
        type            empty;
    }
}
